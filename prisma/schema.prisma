// Prisma Client is the auto-generated database client
import { PrismaClient } from '@prisma/client';

// Initialize Prisma Client
const prisma = new PrismaClient();

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Function to create a new branch
async function createBranch(city: string, address: string, imageURL: string) {
  const newBranch = await prisma.branch.create({
    data: {
      city,
      address,
      imageURL,
    },
  });
  return newBranch;
}

// Function to create a new reservation
async function createReservation(
  name: string,
  phone: string,
  date: Date,
  time: Date,
  people: number,
  branch: string,
  subject: string
) {
  const newReservation = await prisma.reservation.create({
    data: {
      name,
      phone,
      date,
      time,
      people,
      branch,
      subject,
    },
  });
  return newReservation;
}

// Function to create a new specialty
async function createSpecialty(name: string, price: number, imageURL: string) {
  const newSpecialty = await prisma.specialties.create({
    data: {
      name,
      price,
      imageURL,
    },
  });
  return newSpecialty;
}

// Example usage
async function example() {
  // Create a new branch
  const newBranch = await createBranch('City', 'Address', 'example.jpg');
  console.log('New Branch:', newBranch);

  // Create a new reservation
  const newReservation = await createReservation('John Doe', '123456789', new Date(), new Date(), 4, 'Branch Name', 'Subject');
  console.log('New Reservation:', newReservation);

  // Create a new specialty
  const newSpecialty = await createSpecialty('Service', 50.00, 'service.jpg');
  console.log('New Specialty:', newSpecialty);
}

// Calling the example function
example()
  .catch((e) => console.error(e))
  .finally(async () => {
    await prisma.$disconnect();
  });